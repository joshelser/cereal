/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cereal.impl.objects.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"unused", "serial", "rawtypes", "unchecked"})
public class TSimple implements org.apache.thrift.TBase<TSimple, TSimple._Fields>, java.io.Serializable, Cloneable, Comparable<TSimple> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TSimple");

  private static final org.apache.thrift.protocol.TField STR_FIELD_DESC = new org.apache.thrift.protocol.TField("str", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SHRT_FIELD_DESC = new org.apache.thrift.protocol.TField("shrt", org.apache.thrift.protocol.TType.I16, (short)8);
  private static final org.apache.thrift.protocol.TField INTEGER_FIELD_DESC = new org.apache.thrift.protocol.TField("integer", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField LNG_FIELD_DESC = new org.apache.thrift.protocol.TField("lng", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("bytes", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField BLN_FIELD_DESC = new org.apache.thrift.protocol.TField("bln", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField SINGLE_BYTE_FIELD_DESC = new org.apache.thrift.protocol.TField("single_byte", org.apache.thrift.protocol.TType.BYTE, (short)6);
  private static final org.apache.thrift.protocol.TField DUB_FIELD_DESC = new org.apache.thrift.protocol.TField("dub", org.apache.thrift.protocol.TType.DOUBLE, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TSimpleStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TSimpleTupleSchemeFactory());
  }

  public String str; // required
  public short shrt; // required
  public int integer; // required
  public long lng; // required
  public ByteBuffer bytes; // required
  public boolean bln; // required
  public byte single_byte; // required
  public double dub; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STR((short)1, "str"),
    SHRT((short)8, "shrt"),
    INTEGER((short)2, "integer"),
    LNG((short)3, "lng"),
    BYTES((short)4, "bytes"),
    BLN((short)5, "bln"),
    SINGLE_BYTE((short)6, "single_byte"),
    DUB((short)7, "dub");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STR
          return STR;
        case 8: // SHRT
          return SHRT;
        case 2: // INTEGER
          return INTEGER;
        case 3: // LNG
          return LNG;
        case 4: // BYTES
          return BYTES;
        case 5: // BLN
          return BLN;
        case 6: // SINGLE_BYTE
          return SINGLE_BYTE;
        case 7: // DUB
          return DUB;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SHRT_ISSET_ID = 0;
  private static final int __INTEGER_ISSET_ID = 1;
  private static final int __LNG_ISSET_ID = 2;
  private static final int __BLN_ISSET_ID = 3;
  private static final int __SINGLE_BYTE_ISSET_ID = 4;
  private static final int __DUB_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STR, new org.apache.thrift.meta_data.FieldMetaData("str", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHRT, new org.apache.thrift.meta_data.FieldMetaData("shrt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.INTEGER, new org.apache.thrift.meta_data.FieldMetaData("integer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LNG, new org.apache.thrift.meta_data.FieldMetaData("lng", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BYTES, new org.apache.thrift.meta_data.FieldMetaData("bytes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.BLN, new org.apache.thrift.meta_data.FieldMetaData("bln", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SINGLE_BYTE, new org.apache.thrift.meta_data.FieldMetaData("single_byte", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.DUB, new org.apache.thrift.meta_data.FieldMetaData("dub", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TSimple.class, metaDataMap);
  }

  public TSimple() {
  }

  public TSimple(
    String str,
    short shrt,
    int integer,
    long lng,
    ByteBuffer bytes,
    boolean bln,
    byte single_byte,
    double dub)
  {
    this();
    this.str = str;
    this.shrt = shrt;
    setShrtIsSet(true);
    this.integer = integer;
    setIntegerIsSet(true);
    this.lng = lng;
    setLngIsSet(true);
    this.bytes = bytes;
    this.bln = bln;
    setBlnIsSet(true);
    this.single_byte = single_byte;
    setSingle_byteIsSet(true);
    this.dub = dub;
    setDubIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TSimple(TSimple other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetStr()) {
      this.str = other.str;
    }
    this.shrt = other.shrt;
    this.integer = other.integer;
    this.lng = other.lng;
    if (other.isSetBytes()) {
      this.bytes = org.apache.thrift.TBaseHelper.copyBinary(other.bytes);
;
    }
    this.bln = other.bln;
    this.single_byte = other.single_byte;
    this.dub = other.dub;
  }

  public TSimple deepCopy() {
    return new TSimple(this);
  }

  @Override
  public void clear() {
    this.str = null;
    setShrtIsSet(false);
    this.shrt = 0;
    setIntegerIsSet(false);
    this.integer = 0;
    setLngIsSet(false);
    this.lng = 0;
    this.bytes = null;
    setBlnIsSet(false);
    this.bln = false;
    setSingle_byteIsSet(false);
    this.single_byte = 0;
    setDubIsSet(false);
    this.dub = 0.0;
  }

  public String getStr() {
    return this.str;
  }

  public TSimple setStr(String str) {
    this.str = str;
    return this;
  }

  public void unsetStr() {
    this.str = null;
  }

  /** Returns true if field str is set (has been assigned a value) and false otherwise */
  public boolean isSetStr() {
    return this.str != null;
  }

  public void setStrIsSet(boolean value) {
    if (!value) {
      this.str = null;
    }
  }

  public short getShrt() {
    return this.shrt;
  }

  public TSimple setShrt(short shrt) {
    this.shrt = shrt;
    setShrtIsSet(true);
    return this;
  }

  public void unsetShrt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHRT_ISSET_ID);
  }

  /** Returns true if field shrt is set (has been assigned a value) and false otherwise */
  public boolean isSetShrt() {
    return EncodingUtils.testBit(__isset_bitfield, __SHRT_ISSET_ID);
  }

  public void setShrtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHRT_ISSET_ID, value);
  }

  public int getInteger() {
    return this.integer;
  }

  public TSimple setInteger(int integer) {
    this.integer = integer;
    setIntegerIsSet(true);
    return this;
  }

  public void unsetInteger() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTEGER_ISSET_ID);
  }

  /** Returns true if field integer is set (has been assigned a value) and false otherwise */
  public boolean isSetInteger() {
    return EncodingUtils.testBit(__isset_bitfield, __INTEGER_ISSET_ID);
  }

  public void setIntegerIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTEGER_ISSET_ID, value);
  }

  public long getLng() {
    return this.lng;
  }

  public TSimple setLng(long lng) {
    this.lng = lng;
    setLngIsSet(true);
    return this;
  }

  public void unsetLng() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LNG_ISSET_ID);
  }

  /** Returns true if field lng is set (has been assigned a value) and false otherwise */
  public boolean isSetLng() {
    return EncodingUtils.testBit(__isset_bitfield, __LNG_ISSET_ID);
  }

  public void setLngIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LNG_ISSET_ID, value);
  }

  public byte[] getBytes() {
    setBytes(org.apache.thrift.TBaseHelper.rightSize(bytes));
    return bytes == null ? null : bytes.array();
  }

  public ByteBuffer bufferForBytes() {
    return bytes;
  }

  public TSimple setBytes(byte[] bytes) {
    setBytes(bytes == null ? (ByteBuffer)null : ByteBuffer.wrap(bytes));
    return this;
  }

  public TSimple setBytes(ByteBuffer bytes) {
    this.bytes = bytes;
    return this;
  }

  public void unsetBytes() {
    this.bytes = null;
  }

  /** Returns true if field bytes is set (has been assigned a value) and false otherwise */
  public boolean isSetBytes() {
    return this.bytes != null;
  }

  public void setBytesIsSet(boolean value) {
    if (!value) {
      this.bytes = null;
    }
  }

  public boolean isBln() {
    return this.bln;
  }

  public TSimple setBln(boolean bln) {
    this.bln = bln;
    setBlnIsSet(true);
    return this;
  }

  public void unsetBln() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BLN_ISSET_ID);
  }

  /** Returns true if field bln is set (has been assigned a value) and false otherwise */
  public boolean isSetBln() {
    return EncodingUtils.testBit(__isset_bitfield, __BLN_ISSET_ID);
  }

  public void setBlnIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BLN_ISSET_ID, value);
  }

  public byte getSingle_byte() {
    return this.single_byte;
  }

  public TSimple setSingle_byte(byte single_byte) {
    this.single_byte = single_byte;
    setSingle_byteIsSet(true);
    return this;
  }

  public void unsetSingle_byte() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SINGLE_BYTE_ISSET_ID);
  }

  /** Returns true if field single_byte is set (has been assigned a value) and false otherwise */
  public boolean isSetSingle_byte() {
    return EncodingUtils.testBit(__isset_bitfield, __SINGLE_BYTE_ISSET_ID);
  }

  public void setSingle_byteIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SINGLE_BYTE_ISSET_ID, value);
  }

  public double getDub() {
    return this.dub;
  }

  public TSimple setDub(double dub) {
    this.dub = dub;
    setDubIsSet(true);
    return this;
  }

  public void unsetDub() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DUB_ISSET_ID);
  }

  /** Returns true if field dub is set (has been assigned a value) and false otherwise */
  public boolean isSetDub() {
    return EncodingUtils.testBit(__isset_bitfield, __DUB_ISSET_ID);
  }

  public void setDubIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DUB_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STR:
      if (value == null) {
        unsetStr();
      } else {
        setStr((String)value);
      }
      break;

    case SHRT:
      if (value == null) {
        unsetShrt();
      } else {
        setShrt((Short)value);
      }
      break;

    case INTEGER:
      if (value == null) {
        unsetInteger();
      } else {
        setInteger((Integer)value);
      }
      break;

    case LNG:
      if (value == null) {
        unsetLng();
      } else {
        setLng((Long)value);
      }
      break;

    case BYTES:
      if (value == null) {
        unsetBytes();
      } else {
        setBytes((ByteBuffer)value);
      }
      break;

    case BLN:
      if (value == null) {
        unsetBln();
      } else {
        setBln((Boolean)value);
      }
      break;

    case SINGLE_BYTE:
      if (value == null) {
        unsetSingle_byte();
      } else {
        setSingle_byte((Byte)value);
      }
      break;

    case DUB:
      if (value == null) {
        unsetDub();
      } else {
        setDub((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STR:
      return getStr();

    case SHRT:
      return Short.valueOf(getShrt());

    case INTEGER:
      return Integer.valueOf(getInteger());

    case LNG:
      return Long.valueOf(getLng());

    case BYTES:
      return getBytes();

    case BLN:
      return Boolean.valueOf(isBln());

    case SINGLE_BYTE:
      return Byte.valueOf(getSingle_byte());

    case DUB:
      return Double.valueOf(getDub());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STR:
      return isSetStr();
    case SHRT:
      return isSetShrt();
    case INTEGER:
      return isSetInteger();
    case LNG:
      return isSetLng();
    case BYTES:
      return isSetBytes();
    case BLN:
      return isSetBln();
    case SINGLE_BYTE:
      return isSetSingle_byte();
    case DUB:
      return isSetDub();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TSimple)
      return this.equals((TSimple)that);
    return false;
  }

  public boolean equals(TSimple that) {
    if (that == null)
      return false;

    boolean this_present_str = true && this.isSetStr();
    boolean that_present_str = true && that.isSetStr();
    if (this_present_str || that_present_str) {
      if (!(this_present_str && that_present_str))
        return false;
      if (!this.str.equals(that.str))
        return false;
    }

    boolean this_present_shrt = true;
    boolean that_present_shrt = true;
    if (this_present_shrt || that_present_shrt) {
      if (!(this_present_shrt && that_present_shrt))
        return false;
      if (this.shrt != that.shrt)
        return false;
    }

    boolean this_present_integer = true;
    boolean that_present_integer = true;
    if (this_present_integer || that_present_integer) {
      if (!(this_present_integer && that_present_integer))
        return false;
      if (this.integer != that.integer)
        return false;
    }

    boolean this_present_lng = true;
    boolean that_present_lng = true;
    if (this_present_lng || that_present_lng) {
      if (!(this_present_lng && that_present_lng))
        return false;
      if (this.lng != that.lng)
        return false;
    }

    boolean this_present_bytes = true && this.isSetBytes();
    boolean that_present_bytes = true && that.isSetBytes();
    if (this_present_bytes || that_present_bytes) {
      if (!(this_present_bytes && that_present_bytes))
        return false;
      if (!this.bytes.equals(that.bytes))
        return false;
    }

    boolean this_present_bln = true;
    boolean that_present_bln = true;
    if (this_present_bln || that_present_bln) {
      if (!(this_present_bln && that_present_bln))
        return false;
      if (this.bln != that.bln)
        return false;
    }

    boolean this_present_single_byte = true;
    boolean that_present_single_byte = true;
    if (this_present_single_byte || that_present_single_byte) {
      if (!(this_present_single_byte && that_present_single_byte))
        return false;
      if (this.single_byte != that.single_byte)
        return false;
    }

    boolean this_present_dub = true;
    boolean that_present_dub = true;
    if (this_present_dub || that_present_dub) {
      if (!(this_present_dub && that_present_dub))
        return false;
      if (this.dub != that.dub)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TSimple other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetStr()).compareTo(other.isSetStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.str, other.str);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShrt()).compareTo(other.isSetShrt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShrt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shrt, other.shrt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInteger()).compareTo(other.isSetInteger());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInteger()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.integer, other.integer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLng()).compareTo(other.isSetLng());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLng()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lng, other.lng);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBytes()).compareTo(other.isSetBytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bytes, other.bytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBln()).compareTo(other.isSetBln());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBln()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bln, other.bln);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSingle_byte()).compareTo(other.isSetSingle_byte());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSingle_byte()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.single_byte, other.single_byte);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDub()).compareTo(other.isSetDub());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDub()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dub, other.dub);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TSimple(");
    boolean first = true;

    sb.append("str:");
    if (this.str == null) {
      sb.append("null");
    } else {
      sb.append(this.str);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("shrt:");
    sb.append(this.shrt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("integer:");
    sb.append(this.integer);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lng:");
    sb.append(this.lng);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bytes:");
    if (this.bytes == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.bytes, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bln:");
    sb.append(this.bln);
    first = false;
    if (!first) sb.append(", ");
    sb.append("single_byte:");
    sb.append(this.single_byte);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dub:");
    sb.append(this.dub);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TSimpleStandardSchemeFactory implements SchemeFactory {
    public TSimpleStandardScheme getScheme() {
      return new TSimpleStandardScheme();
    }
  }

  private static class TSimpleStandardScheme extends StandardScheme<TSimple> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TSimple struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.str = iprot.readString();
              struct.setStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SHRT
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.shrt = iprot.readI16();
              struct.setShrtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INTEGER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.integer = iprot.readI32();
              struct.setIntegerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LNG
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lng = iprot.readI64();
              struct.setLngIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bytes = iprot.readBinary();
              struct.setBytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BLN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.bln = iprot.readBool();
              struct.setBlnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SINGLE_BYTE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.single_byte = iprot.readByte();
              struct.setSingle_byteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DUB
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.dub = iprot.readDouble();
              struct.setDubIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TSimple struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.str != null) {
        oprot.writeFieldBegin(STR_FIELD_DESC);
        oprot.writeString(struct.str);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INTEGER_FIELD_DESC);
      oprot.writeI32(struct.integer);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LNG_FIELD_DESC);
      oprot.writeI64(struct.lng);
      oprot.writeFieldEnd();
      if (struct.bytes != null) {
        oprot.writeFieldBegin(BYTES_FIELD_DESC);
        oprot.writeBinary(struct.bytes);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BLN_FIELD_DESC);
      oprot.writeBool(struct.bln);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SINGLE_BYTE_FIELD_DESC);
      oprot.writeByte(struct.single_byte);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DUB_FIELD_DESC);
      oprot.writeDouble(struct.dub);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHRT_FIELD_DESC);
      oprot.writeI16(struct.shrt);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TSimpleTupleSchemeFactory implements SchemeFactory {
    public TSimpleTupleScheme getScheme() {
      return new TSimpleTupleScheme();
    }
  }

  private static class TSimpleTupleScheme extends TupleScheme<TSimple> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TSimple struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetStr()) {
        optionals.set(0);
      }
      if (struct.isSetShrt()) {
        optionals.set(1);
      }
      if (struct.isSetInteger()) {
        optionals.set(2);
      }
      if (struct.isSetLng()) {
        optionals.set(3);
      }
      if (struct.isSetBytes()) {
        optionals.set(4);
      }
      if (struct.isSetBln()) {
        optionals.set(5);
      }
      if (struct.isSetSingle_byte()) {
        optionals.set(6);
      }
      if (struct.isSetDub()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetStr()) {
        oprot.writeString(struct.str);
      }
      if (struct.isSetShrt()) {
        oprot.writeI16(struct.shrt);
      }
      if (struct.isSetInteger()) {
        oprot.writeI32(struct.integer);
      }
      if (struct.isSetLng()) {
        oprot.writeI64(struct.lng);
      }
      if (struct.isSetBytes()) {
        oprot.writeBinary(struct.bytes);
      }
      if (struct.isSetBln()) {
        oprot.writeBool(struct.bln);
      }
      if (struct.isSetSingle_byte()) {
        oprot.writeByte(struct.single_byte);
      }
      if (struct.isSetDub()) {
        oprot.writeDouble(struct.dub);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TSimple struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.str = iprot.readString();
        struct.setStrIsSet(true);
      }
      if (incoming.get(1)) {
        struct.shrt = iprot.readI16();
        struct.setShrtIsSet(true);
      }
      if (incoming.get(2)) {
        struct.integer = iprot.readI32();
        struct.setIntegerIsSet(true);
      }
      if (incoming.get(3)) {
        struct.lng = iprot.readI64();
        struct.setLngIsSet(true);
      }
      if (incoming.get(4)) {
        struct.bytes = iprot.readBinary();
        struct.setBytesIsSet(true);
      }
      if (incoming.get(5)) {
        struct.bln = iprot.readBool();
        struct.setBlnIsSet(true);
      }
      if (incoming.get(6)) {
        struct.single_byte = iprot.readByte();
        struct.setSingle_byteIsSet(true);
      }
      if (incoming.get(7)) {
        struct.dub = iprot.readDouble();
        struct.setDubIsSet(true);
      }
    }
  }

}

